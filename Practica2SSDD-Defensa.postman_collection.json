{
	"info": {
		"_postman_id": "1bbdef32-7a2c-4158-a9f6-65814247c9a5",
		"name": "Practica2SSDD-Defensa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33136035",
		"_collection_link": "https://lunar-flare-809686.postman.co/workspace/New-Team-Workspace~685661b4-5ca1-4d25-b1e3-dadd1037ab2f/collection/33136035-1bbdef32-7a2c-4158-a9f6-65814247c9a5?action=share&source=collection_link&creator=33136035"
	},
	"item": [
		{
			"name": "EVENT",
			"item": [
				{
					"name": "Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'users' array in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf(1, \"The 'users' array should contain 1 element\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Evento 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nuevo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.description).to.exist;",
									"    pm.expect(responseData.dateTime).to.exist;",
									"    pm.expect(responseData.image).to.exist;",
									"    pm.expect(responseData.createdAt).to.exist;",
									"    pm.expect(responseData.updatedAt).to.exist;",
									"    pm.expect(responseData.users).to.exist;",
									"});",
									"",
									"pm.test(\"DateTime is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.dateTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"DateTime is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Image is a URL\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.image).to.exist.and.to.satisfy(function (value) {",
									"    return /^https?:\\/\\//.test(value);",
									"  }, \"Image should be a valid URL\");",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in valid date and time format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"CreatedAt is not in valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Nuevo POST\",\n    \"description\": \"Nuevo POST\",\n    \"dateTime\": \"2024-04-15T19:30:00\",\n    \"image\": \"https://images.pexels.com/photos/2350325/pexels-photo-2350325.jpeg?auto=compress&cs=tinysrgb&w=800\",\n    \"locations\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Evento 6",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Evento 1",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Modificado PUT\",\n    \"description\": \"Modificado PUT\",\n    \"dateTime\": \"2024-10-03 20:00\",\n    \"image\": \"https://i.blogs.es/25d3e1/rammstein/1366_2000.jpg\",\n    \"locations\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Evento 1",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Modificado PATCH\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Localizaciones de un evento",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/event/1/locations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "A単adir localizaciones a evento",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"locations\": [2,3]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						},
						"description": "Patch a単adir localizaciones"
					},
					"response": []
				},
				{
					"name": "Usuarios de un evento",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "A単adir usuarios a evento",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [1,5]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						},
						"description": "Patch a単adir localizaciones"
					},
					"response": []
				},
				{
					"name": "Nuevo con loc y users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"DateTime is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.dateTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"DateTime is not in a valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Users array is present in the response and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.users).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.users.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Nuevo POST\",\n    \"description\": \"Nuevo POST\",\n    \"dateTime\": \"2024-04-15T19:30:00\",\n    \"image\": \"https://images.pexels.com/photos/2350325/pexels-photo-2350325.jpeg?auto=compress&cs=tinysrgb&w=800\",\n    \"locations\": [1,3],\n    \"users\": [4]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar con loc y users",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Modificado PUT\",\n    \"description\": \"Modificado PUT\",\n    \"dateTime\": \"2024-10-03 20:00\",\n    \"image\": \"https://i.blogs.es/25d3e1/rammstein/1366_2000.jpg\",\n    \"locations\": [2, 4],\n    \"users\": [3, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar evento con loc y users",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/event/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"event",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LOCATION",
			"item": [
				{
					"name": "Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"",
									"  responseData.forEach(function (location) {",
									"    pm.expect(location.id).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function (location) {",
									"    pm.expect(location.capacity).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Localizaci坦n 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.capacity).to.be.a('number');",
									"    pm.expect(responseData.capacity).to.be.gte(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'type' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.type).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/location/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nuevo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'address' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.address).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Nuevo POST\",\n    \"address\": \"Nuevo POST\",\n    \"capacity\": 200,\n    \"type\": \"Nuevo POST\",\n    \"accessibility\":\"S鱈\",\n    \"city\": \"Nuevo POST\",\n    \"country\": \"Nuevo POST\",\n    \"image\": \"https://images.pexels.com/photos/262047/pexels-photo-262047.jpeg?auto=compress&cs=tinysrgb&w=800\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Localizaci坦n 6",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/location/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Localizaci坦n 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.capacity).to.be.a('number');",
									"  pm.expect(responseData.capacity).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Actualizado PUT\",\n    \"address\": \"Actualizado PUT\",\n    \"capacity\": 18000,\n    \"type\": \"Sala grande\",\n    \"accessibility\": \"Si\",\n    \"city\": \"Actualizado PUT\",\n    \"country\": \"Actualizado PUT\",\n    \"image\": \"https://img.huffingtonpost.es/files/image_720_480/uploads/2023/11/21/fachada-del-wizink-center-de-madrid.jpeg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Localizaci坦n 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.capacity).to.be.a('number');",
									"    pm.expect(responseData.capacity).to.be.at.least(0, \"Capacity should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Type is a valid value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.type).to.exist.and.to.be.oneOf([\"value1\", \"value2\", \"value3\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"PATCH\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eventos en una localizaci坦n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Date and time are in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(event) {",
									"        pm.expect(event.dateTime).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Invalid date and time format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Check if 'users' array is present and not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
									"    responseData.forEach(function(event) {",
									"        pm.expect(event.users).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Users array should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/location/4/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"4",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "A単adir eventos a localizaci坦n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.capacity).to.be.a('number');",
									"    pm.expect(responseData.capacity).to.be.at.least(0, \"Capacity should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"The address should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"events\": [3, 4, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nuevo con eventos",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Nuevo POST\",\n    \"address\": \"Nuevo POST\",\n    \"capacity\": 200,\n    \"type\": \"Nuevo POST\",\n    \"accessibility\":\"S鱈\",\n    \"city\": \"Nuevo POST\",\n    \"country\": \"Nuevo POST\",\n    \"image\": \"https://images.pexels.com/photos/262047/pexels-photo-262047.jpeg?auto=compress&cs=tinysrgb&w=800\",\n    \"events\": [4, 1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar con eventos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Capacity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.capacity).to.be.a('number');",
									"    pm.expect(responseData.capacity).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Actualizado PUT\",\n    \"address\": \"Actualizado PUT\",\n    \"capacity\": 17000,\n    \"type\": \"Sala grande\",\n    \"accessibility\": \"S鱈\",\n    \"city\": \"Actualizado PUT\",\n    \"country\": \"Actualizado PUT\",\n    \"image\": \"https://img.huffingtonpost.es/files/image_720_480/uploads/2023/11/21/fachada-del-wizink-center-de-madrid.jpeg\",\n    \"events\": [2, 5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/location/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar localizaci坦n con eventos",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/location/7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"location",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "USER",
			"item": [
				{
					"name": "Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(user){",
									"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.id).to.be.a('number').and.to.be.at.least(0, \"'id' should be a non-negative integer\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Usuario 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nuevo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.email).to.exist.and.to.match(/\\S+@\\S+\\.\\S+/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Birthdate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Nuevo POST\",\n    \"email\": \"Nuevo POST\",\n    \"password\": \"Nuevo POST\",\n    \"firstName\": \"Nuevo POST\",\n    \"lastName\": \"Nuevo POST\",\n    \"birthdate\": \"1990-06-22\",\n    \"gender\": \"Femenino\",\n    \"selectedAvatar\": \"/avatar-mujer.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Usuario 6",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/user/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Usuario 1",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Actualizado PUT\",\n    \"email\": \"elena@gmail.com\",\n    \"password\": \"elena123\",\n    \"firstName\": \"Elena\",\n    \"lastName\": \"Gonzalez\",\n    \"birthdate\": \"1990-06-22T22:00:00.000+00:00\",\n    \"gender\": \"Femenino\",\n    \"selectedAvatar\": \"/avatar-mujer.png\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Usuario 1",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"Actualizado PATCH\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Evento al que va ese usuario",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/5/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"5",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "A単adir evento a ese usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Birthdate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"evento\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nuevo con evento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"The 'createdAt' field is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Nuevo POST\",\n    \"email\": \"Nuevo POST\",\n    \"password\": \"Nuevo POST\",\n    \"firstName\": \"Nuevo POST\",\n    \"lastName\": \"Nuevo POST\",\n    \"birthdate\": \"1990-06-22\",\n    \"gender\": \"Femenino\",\n    \"selectedAvatar\": \"/avatar-mujer.png\",\n    \"evento\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar con evento",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Actualizado PUT\",\n    \"email\": \"elena@gmail.com\",\n    \"password\": \"elena123\",\n    \"firstName\": \"Elena\",\n    \"lastName\": \"Gonzalez\",\n    \"birthdate\": \"1990-06-22T22:00:00.000+00:00\",\n    \"gender\": \"Femenino\",\n    \"selectedAvatar\": \"/avatar-mujer.png\",\n    \"evento\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar usuario con evento",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}